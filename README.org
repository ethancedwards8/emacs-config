#+TITLE: Ethan Edwards Emacs Configuration
#+AUTHOR: Ethan Carter Edwards
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+LATEX_HEADER: \usepackage[a4paper, left=1.5cm, right=1.5cm, top=2cm, bottom=2cm]{geometry}

This setup was highly inspired by [[https://jamiecollinson.com/blog/my-emacs-config/#footnote-1][Jamie Collinson's config]]

This is my Emacs Configuration, I've been using Emacs for a few months and I decided to go big or go home.

After a while of having it all in a single elisp file it got annoying/hard to work with.

I'm documenting it for fun, and I like notes so I'm linking to where I found each trick or configuration.

I'll also probably put this somewhere on [[https://ethancedwards.com][my site]] and update it from time to time, but the "live" version is on my [[https://gitlab.com/ethancedwards/emacs-config][gitlab]].

TODO: =toggle-truncate-lines=
TODO: Have org mode auto detect if theres a "technical" roam tag and enable =display-fill-column-indicator-mode=

#+BEGIN_QUOTE
"The Grind is not Glamorous."
- Casey Neistat
#+END_QUOTE

* Table of Contents :toc:
- [[#setup][Setup]]
  - [[#configure-package-sources-and-use-package--garbage-collection][Configure package sources and =use-package= + Garbage Collection]]
  - [[#configure-elpaca][Configure elpaca]]
  - [[#benchmark-startup][Benchmark startup]]
  - [[#find-config-function][Find config function]]
  - [[#find-main-org-file-function][Find Main org file function]]
  - [[#set-custom-settings-to-load-in-own-file][Set custom settings to load in own file]]
  - [[#add-elisp-directory-to-load-path][Add elisp directory to load-path]]
  - [[#fix-exec-path][Fix exec-path]]
- [[#preferences][Preferences]]
  - [[#turn-off-ugly-window-decoration][Turn off ugly window decoration.]]
  - [[#shorten-the-yes-or-no-prompts][Shorten the =yes or no= prompts]]
  - [[#move-all-of-the-extra-save-files-to-saves][Move all of the extra save files to ~/.saves]]
  - [[#display-line-numbers-might-change-only-to-prog-text-and-conf-mode-later][Display line numbers, might change only to prog, text, and conf mode later]]
  - [[#confirm-to-kill-emacs-whenever-not-running-in-daemon-mode][Confirm to kill Emacs whenever not running in Daemon mode]]
  - [[#just-some-user-information][Just some user information]]
  - [[#set-initial-buffer][Set initial buffer]]
  - [[#parenthesis-tweaks][Parenthesis tweaks]]
  - [[#spell-checking-with-flyspell][Spell checking with FlySpell]]
  - [[#delete-trailing-whitespace-on-save][Delete trailing whitespace on save]]
- [[#misc-keybinds][Misc. Keybinds]]
- [[#custom-elisp][Custom Elisp]]
  - [[#howard-abrams-tutorial-lisp][Howard Abram's tutorial lisp]]
  - [[#m-x-stop][=M-x stop=]]
  - [[#auto-bablel-readmeorg-after-saving][Auto bablel README.org after saving]]
  - [[#refresh-org-files][Refresh org files]]
- [[#packages][Packages]]
  - [[#keybinds][Keybinds]]
  - [[#theming-and-fontsfaces][Theming and Fonts/Faces]]
  - [[#interface][Interface]]
  - [[#general-tools][General tools]]
  - [[#programming][Programming]]
  - [[#fun-packages][Fun packages]]
- [[#applications][Applications]]
  - [[#emms][emms]]
  - [[#elpher][elpher]]

* Setup

** Configure package sources and =use-package= + Garbage Collection

Add repo's. ELPA, MELPA, org, and ublt.

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from README.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  ;; (setq gc-cons-threshold (* 50 1000 1000))

  ;; initialize package sources
  ;; (require 'package)
  ;; (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
  ;; 			 ("melpa" . "https://melpa.org/packages/")
  ;; 			 ("ublt" . "https://elpa.ubolonton.org/packages/")
  ;; 			 ("org" . "https://orgmode.org/elpa/")))

  ;; (package-initialize)
  ;; (unless (package-installed-p 'use-package)
  ;;   (package-refresh-contents)
  ;;   (package-install 'use-package))

  ;; (require 'use-package)
  ;; ;; (setq use-package-compute-statistics t)
  ;; (setq use-package-always-ensure t)
#+end_src

** Configure elpaca

#+begin_src emacs-lisp
  ;; install straight.el
  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
   ;; Enable :elpaca use-package keyword.
   (elpaca-use-package-mode)
   ;; Assume :elpaca t unless otherwise specified.
   (setq elpaca-use-package-by-default t))

  ;; Necessary to use the `:elpaca' use-package keyword at the top-level.
  (elpaca-wait)

  (elpaca elpaca-use-package
   ;; Enable :elpaca use-package keyword.
   (elpaca-use-package-mode)
   ;; Assume :elpaca t unless otherwise specified.
   (setq elpaca-use-package-by-default t))

  ;; Necessary to use the `:elpaca' use-package keyword at the top-level.
  (elpaca-wait)
#+end_src

** Benchmark startup

Benchmark's my startup, when running as daemon I won't see this message so I can view it in =*Messages*=

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

** Find config function

#+begin_src emacs-lisp
  (defun find-config ()
    "Edit README.org/init.el"
    (interactive)
    (find-file "~/.emacs.d/README.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+end_src

** Find Main org file function

#+begin_src emacs-lisp
  (defun find-main ()
    "Find index org file"
    (interactive)
    (org-roam-jump-to-index))

  ;; (global-set-key (kbd "C-c O") '(lambda () "Find index org file" (interactive) (org-roam-jump-to-index)))
  (global-set-key (kbd "C-c O") 'find-main)
#+end_src

** Set custom settings to load in own file

Stops Emacs from adding weird things to =init.el= This creates a temporary file that'll be destroyed.

#+begin_src emacs-lisp
  ;; (setq custom-file (make-temp-file "emacs-custom"))
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  ;; (setq custom-file (make-temp-file "emacs-custom.el"))
#+end_src

** Add elisp directory to load-path

I have my custom/stolen elisp code in ~/.emacs.d/lisp/. This will add that to my load path

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src

** Fix exec-path

#+begin_src emacs-lisp
  (add-to-list 'exec-path "~/.cargo/bin")
#+end_src

* Preferences

** Turn off ugly window decoration.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode -1)
#+end_src

** Shorten the =yes or no= prompts

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Move all of the extra save files to ~/.saves

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
#+end_src

** Display line numbers, might change only to prog, text, and conf mode later

#+begin_src emacs-lisp
  ;; (when (version<= "26.0.50" emacs-version )
  ;;   (global-display-line-numbers-mode))

  ;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** Confirm to kill Emacs whenever not running in Daemon mode

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Just some user information

#+begin_src emacs-lisp
  (setq user-full-name "Ethan Carter Edwards"
	user-mail-address "ethan@ethancedwards.com")
#+end_src

** Set initial buffer

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t) ;; disables startup screen, which means the default buffer is the scratch buffer!
#+end_src

** Parenthesis tweaks

=show-paren-mode= highlights the matching parenthesis
=electric-pair-mode= pairs any quotes, parens, brackets, etc.

#+begin_src emacs-lisp
  (show-paren-mode)
  (electric-pair-mode)
#+end_src

** Spell checking with FlySpell

[[https://www.tenderisthebyte.com/blog/2019/06/09/spell-checking-emacs/][Pretty good guide on this]]. Plus the [[https://www.emacswiki.org/emacs/FlySpell][emacswiki page]].

#+begin_src emacs-lisp
  ;; Enable flyspell in these modes
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
  ;; disable them in these modes
  (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
   (add-hook hook (lambda () (flyspell-mode -1))))

  ;; Enable mouse for MacOS
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
       (define-key flyspell-mouse-map [mouse-3] #'undefined)))
#+end_src

** Delete trailing whitespace on save

#+begin_src emacs-lisp
  (add-hook 'before-save-hook #'(lambda () (delete-trailing-whitespace)))
#+end_src

* Misc. Keybinds

From the [[https://github.com/technomancy/better-defaults/blob/master/better-defaults.el][better defaults github page]]
(I'm pretty sure these get overwriteen by Swiper but its okay :) )

#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-M-r") 'isearch-backward-regexp)
#+end_src

Enable ibuffer, this thing is amazing, wouldn't use anything else.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Keybinds to change the size of windows

#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'enlarge-window)
  (global-set-key (kbd "S-C-<up>") 'shrink-window)
#+end_src

Rebind C-S-v to the opposite of M-v, EVIL binds over C-v and I want this back.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-v") 'scroll-up-command)
#+end_src

* Custom Elisp

** Howard Abram's tutorial lisp

Fun little elisp function I wrote following a Howard Abram's tutorial, nothing special.

#+begin_src emacs-lisp
  (defun my/custom-S-o-from-vim (times)
    "Inserts a newline(s) above the line conataining the cursor.
  Very Similar to S-o from Vim"
    (interactive "p")
    (save-excursion
      (move-beginning-of-line 1)
      (newline times)))

  (global-set-key (kbd "C-S-o")
		  'my/custom-S-o-from-vim)
#+end_src

** =M-x stop=

Funny little function from user =jeetelongname#5927= on Discord :)

#+begin_src emacs-lisp
  (defun stop ()
  "Proves I'm sane, not losing my sanity whatsoever"
    (interactive)
    (defvar name "*I can quit at any time*")
    (generate-new-buffer name)
    (switch-to-buffer name)
    (insert "I can stop at any time\n")
    (insert "I am in control"))
#+end_src

** Auto bablel README.org after saving

[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#auto-tangle-configuration-files][Stolen from David]] :)

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/README.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

** Refresh org files

If I move a file agenda freaks out, so I can just run this and fix it.

The recursive agenda bit can be [[https://www.reddit.com/r/orgmode/comments/6q6cdk/adding_files_to_the_agenda_list_recursively/dkvokt1?utm_source=share&utm_medium=web2x&context=3][found here]]
#+begin_src emacs-lisp
  ;; Have org-agenda files list recursively
  (defun my/refresh-org-files ()
  	(interactive)
  	(setq org-agenda-files (apply 'append
  				      (mapcar
  				       (lambda (directory)
  					 (directory-files-recursively
  					  directory org-agenda-file-regexp))
  				       '("~/Nextcloud/Org/")))))
#+end_src

* Packages

** Keybinds

*** Leader key

I use general.el to set my "leader" key, =SPC=, or =C-SPC=.

#+begin_src emacs-lisp
  (use-package general
    :demand t
    :config
    (general-evil-setup)
    (general-auto-unbind-keys)
    (general-override-mode +1)

    (general-create-definer my/leader-key
      :states '(normal insert visual emacs treemacs)
      :keymap 'override
      :prefix "SPC"
      :global-prefix "C-SPC"
      :non-normal-prefix "C-SPC"))
  (elpaca-wait)
#+end_src

*** Leader functions

Here I can define functions with my leader key.

#+begin_src emacs-lisp
  (my/leader-key
  	"SPC"  '(counsel-find-file :wk "counsel find file")
  	"I" '(find-config :wk "edit README.org/init.el")
  	"O" '(find-main :wk "edit index/main org file")
  	"." '(counsel-M-x :wk "M-x")
  	"b" '(:ignore t :wk "buffer")
  	"b k" '(kill-buffer :wk "kill buffer")
  	"b b" '(switch-to-buffer :wk "switch buffer")
  	"b B" '(ibuffer :wk "all buffers"))
#+end_src

*** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 5))
#+end_src

** Theming and Fonts/Faces

*** Fonts/Faces

JetBrains Mono Font, my favorite, I see no reason to use anything else.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal :height 98 :width 'normal :foundry "JB  " :family "JetBrains Mono")

  (when (string= system-type "darwin")
    (set-face-attribute 'default nil :inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal :height 130 :width 'normal :foundry "JB  " :family "JetBrains Mono"))

  (when (string= system-name "navidad")
    (set-face-attribute 'default nil :inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal :height 130 :width 'normal :foundry "JB  " :family "JetBrains Mono"))
#+end_src

Not super sure what these are, I'm going to comment them out for now...

#+begin_src emacs-lisp
  (setq ansi-color-faces-vector
    [default default default italic underline success warning error])
  (setq ansi-color-names-vector
    ["black" "#d55e00" "#009e73" "#f8ec59" "#0072b2" "#cc79a7" "#56b4e9" "white"])
#+end_src

*** Themes

The doom themes are really nice, I might switch back to the =deeper-blue= theme .

#+Begin_src emacs-lisp
  (use-package spacegray-theme :defer t)
  (use-package doom-themes
    :defer t
    :init (load-theme 'doom-palenight t))
#+end_src

*** Modeline

Powerline modeline, has everything I need, I might switch to doom-modeline

#+begin_src emacs-lisp
  (use-package powerline
    :config
    (powerline-default-theme))
#+end_src

** Interface

This is the packages that integrate with my workflow, Ivy, Evil, Magit, Org stuff, etc.

*** ESC Cancels all

Don't know if I'll use it, maybe it'll work for =C-[=, if it doesn't then I don't feel like fixing this.

#+begin_src emacs-lisp
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** Rebind C-u

Rebind =C-u= to evil stuffz, so I need to rebind =universal-argument= command to another key, =C-S-u=

#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-u") 'universal-argument)
#+end_src

*** Evil Mode

Evil mode emulates Vi/Vim keybinds for Emacs

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1))

  (my/leader-key
  	"w"   '(:ignore t :wk "window")
  	"w h" '(evil-window-left :wk "move to left window")
  	"w j" '(evil-window-down :wk "move to down window")
  	"w k" '(evil-window-up :wk "move to up window")
  	"w l" '(evil-window-right :wk "move to right window")
  	"w c" '(evil-window-delete :wk "close window")
  	"w v" '(evil-window-vsplit :wk "split window vertically")
  	"w s" '(evil-window-split :wk "split window horizontally")
  	"w o" '(delete-other-windows :wk "delete other windows")
  	"TAB" '(evil-switch-to-windows-last-buffer :wk "switch to previous buffer"))
#+end_src

Evil-collection adds Evil binds to the rest of Emacs

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

Evil-commentary adds better commenting functionality to evil, =gcc= comments out any line.

#+begin_src emacs-lisp
  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode))
#+end_src

Evil-org adds evil functionality to org mode, very helpful

#+begin_src emacs-lisp
  (fset 'evil-redirect-digit-argument 'ignore) ;; before evil-org loaded

  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  ;; https://github.com/Somelauw/evil-org-mode/issues/93
  ;; (add-to-list 'evil-digit-bound-motions 'evil-org-beginning-of-line)
  ;; (evil-define-key 'motion 'evil-org-mode
  ;;     (kbd "0") 'evil-org-beginning-of-line)
#+end_src

*** Dired

Dired is a file manager built into Emacs, its pretty great.

#+begin_src emacs-lisp
  (use-package dired
    :elpaca nil
    :config
    (when (string= system-type "darwin")
      (setq dired-use-ls-dired nil)))

    (my/leader-key
      "e" '(dired-jump :wk "dired")
      "E" '(dired :wk "dired"))
#+end_src

**** dired-subtree

This allows me to have subtree views in dired

#+begin_src emacs-lisp
  (use-package dired-subtree
	  :bind (:map dired-mode-map
		      ("<tab>" . dired-subtree-toggle)
		      ("<backtab>" . dired-subtree-cycle)))
#+end_src

*** Org mode

Org mode is literally the best, I'm writing this config in org, what else do you need? EDIT. No longer using org mode.

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-directory "~/Nextcloud/org")
    (diary-file "~/Nextcloud/Org/emacs-diary")
    (org-default-notes-file "~/Nextcloud/Org/Notes.org")
    (org-log-done t)
    (org-agenda-include-diary t)
    (org-image-actual-width nil)
    :bind (("C-c L" . org-stored-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture))
    :config
    (eval-after-load "org"
      '(require 'ox-md nil t))
    (eval-after-load "org"
      '(require 'org-tempo))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    (my/refresh-org-files))

    (my/leader-key
	"n r" '(my/refresh-org-files :wk "refresh my org files")
	"n a" '(org-agenda :wk "org agenda"))
#+end_src

toc-org allows me to generate a toc at the top of my lifes.

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

*** Terminal modes

**** vterm

I use vterm for the cases when I need a terminal emulator, I try to use eshell as much as possible.

#+begin_src emacs-lisp
  (use-package vterm
    :custom
    (vterm-always-compile-module t)
    ;; https://github.com/akermu/emacs-libvterm/issues/525
    :bind (("C-x v" . (lambda () (interactive) (vterm t)))
	   ("C-x 4 v" . vterm-other-window)
	   :map vterm-mode-map
	   ("<C-backspace>" . (lambda () (interactive) (vterm-send-meta-backspace)))))
	   ;; came up with this myself, fixes C-backspace, pretty proud of it not going to lie :)
  (my/leader-key
	"v v" '((lambda () (interactive) (vterm t)) :wk "vterm"))
#+end_src

**** eshell

Eshell is probably my favorite shell for Emacs, its fast and just works :tm:

eshell-git-prompt gives me a git prompt for eshell, kinda in the name xD

#+begin_src emacs-lisp
  (use-package eshell-git-prompt)
  (elpaca-wait)

  (use-package eshell
    ;; :ensure nil
    :elpaca nil
    :custom (eshell-aliases-file "~/.emacs.d/eshell/eshell-alias")
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destory-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "iotop")))

    (eshell-git-prompt-use-theme 'powerline))

    (my/leader-key
  	"v e" '(eshell :wk "eshell"))
#+end_src

*** Completion framework(s)

**** Ivy

I use Ivy, it's a completion framework for Emacs, I'm in the process of learning how to configure mine.
This is the initial setup of Ivy, this is bound to change drastically over time.

#+begin_src emacs-lisp
  (use-package ivy
    :custom (ivy-initial-inputs-alist nil)
    :bind (("C-s" . counsel-grep-or-swiper)
           ("C-S-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-j" . ivy-next-line)
	   ("C-d" . ivy-switch-buffer-kill))
    :config
    (ivy-mode 1))
#+end_src

**** Ivy Rich

Ivy Rich provides a nicer interface to Ivy in my opinion.

#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

**** Counsel

Counsel takes Ivy further.

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-x j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))
#+end_src

** General tools

These are some general tools that I use, they don't really belong in any category.

*** Rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook
    ((org-mode prog-mode) . rainbow-mode))
#+end_src

*** Rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Helpful - better help buffer
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (my/leader-key
      "h" '(:ignore t :wk "helpful")
      "h f" '(counsel-describe-function :wk "describe function")
      "h v" '(counsel-describe-variable :wk "describe variable")
      "h k" '(helpful-key :wk "describe keybind"))
#+end_src

*** Hl-TODO - highlight TODO keywords and the like
#+begin_src emacs-lisp
  (use-package hl-todo
    :config
    (global-hl-todo-mode))
#+end_src

*** exec-path-from-shell - enable $PATH on MacOSX

#+begin_src emacs-lisp
  ;; only install when on macos
  (when (string= system-type "darwin")
    (use-package exec-path-from-shell
      :config
      (when (memq window-system '(mac ns))
	(exec-path-from-shell-initialize))
      (when (daemonp)
	(exec-path-from-shell-initialize))
      ))
#+end_src

*** envrc - emacs direnv integration

#+begin_src emacs-lisp
  (use-package envrc
   :init
   (envrc-global-mode))
#+end_src

*** debbugs - access the gnu bug tracker form inside emacs

#+begin_src emacs-lisp
  (use-package debbugs)
#+end_src

** Programming

*** company-mode

#+begin_src emacs-lisp
  (use-package company
    :config
    (company-tng-mode 0)
    :custom (company-minimum-prefix-length 2)
    :bind (:map company-active-map
  		("<tab>" . company-complete-selection))
  	  (:map lsp-mode-map
  		("<tab>" . company-indent-or-complete-common)))
#+end_src

*** flycheck-mode

#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src

*** haskell-mode

#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

*** markdown-mode

#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src

** Fun packages

These packages are kinda fun, don't really have much of a point

*** Elcord - Discord rich presence
#+begin_src emacs-lisp
  (use-package elcord
    :defer t)
#+end_src

*** Spotify - Control the Spotify app in emacs

#+begin_src emacs-lisp
  (use-package spotify
    :defer t)

  (my/leader-key
      "a" '(:ignore t :wk "applications")
      "a s SPC" '(spotify-playpause :wk "play-pause")
      "a s n" '(spotify-next :wk "spotify next")
      "a s p" '(spotify-previous :wk "spotify previous")
      "a s c" '(spotify-current :wk "spotify current song"))
#+end_src

*** Chess - play chess inside of Emacs!
#+Begin_src emacs-lisp
  (use-package chess
    :defer t)
#+end_src

*** gnugo - Play GO inside of Emacs!
#+begin_src emacs-lisp
  (use-package gnugo
    :defer t)
#+end_src

*** snow.el - Let it snow in Emacs!

#+begin_src emacs-lisp
  (use-package snow
    :defer t)
#+end_src

* Applications

** emms

EMMS is a Music player/interface for Emacs. I've heard good things about it and I'm willing to try it out.

#+begin_src emacs-lisp
  (use-package emms
    :commands emms
    :config
    (emms-standard)
    (emms-default-players))
#+end_src

** elpher

elpher is a gemini and gopher client for emacs.

#+begin_src emacs-lisp
  (use-package elpher)
#+end_src
