#+TITLE: Ethan Edward's Emacs Configuration
#+AUTHOR: Ethan Carter Edwards
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+LATEX_HEADER: \usepackage[a4paper, left=1.5cm, right=1.5cm, top=2cm, bottom=2cm]{geometry}

This setup was highly inspired by [[https://jamiecollinson.com/blog/my-emacs-config/#footnote-1][Jamie Collinson's config]]

This is my Emacs Configuration, I've been using Emacs for a few months and I decided to go big or go home.

After a while of having it all in a single elisp file it got annoying/hard to work with.

I'm documenting it for fun, and I like notes so I'm linking to where I found each trick or configuration.

I'll also probably put this somewhere on [[https://ethancedwards.com][my site]] and update it from time to time, but the "live" version is on my [[https://gitlab.com/ethancedwards/emacs-config][gitlab]].

#+BEGIN_QUOTE
"The Grind is not Glamorous."
- Casey Neistat
#+END_QUOTE

* Setup

** Configure package sources and =use-package= + Garbage Collection

Add repo's. ELPA, MELPA, org, and ublt. 

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; initialize package sources
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("ublt" . "https://elpa.ubolonton.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))

  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Benchmark startup

Benchmark's my startup, when running as daemon I won't see this message so I can view it in =*Messages*=

#+begin_src emacs-lisp

  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

** Find config function

#+begin_src emacs-lisp
  (defun find-config ()
    "Edit README.org/init.el"
    (interactive)
    (find-file "~/.emacs.d/README.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+end_src

** Set custom settings to load in own file

Stops Emacs from adding weird things to =init.el= This creates a temporary file that'll be destroyed.

#+begin_src emacs-lisp
  ;; (setq custom-file (make-temp-file "emacs-custom"))
  ;; (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (setq custom-file (make-temp-file "emacs-custom.el"))
#+end_src

** Add elisp directory to load-path

I have my custom/stolen elisp code in ~/.emacs.d/lisp/. This will add that to my load path

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src

* Preferences

** Turn off ugly window deocration.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode -1)
#+end_src

** Shorten the =yes or no= prompts

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Move all of the extra save files to ~/.saves

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
#+end_src

** Display line numbers, might change only to prog, text, and conf mode later

#+begin_src emacs-lisp
  ;; (when (version<= "26.0.50" emacs-version )
  ;;   (global-display-line-numbers-mode))

  ;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** Confirm to kill Emacs whenever not running in Daemon mode

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Just some user information

#+begin_src emacs-lisp
  (setq user-full-name "Ethan Carter Edwards"
	user-mail-address "ethancarteredwards@gmail.com")
#+end_src

** Set Dashboard as my initial buffer

#+begin_src emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** Disable nativecomp logs, they're very annoying.

#+begin_src emacs-lisp
   ;; '(warning-suppress-log-types '((comp) (comp)))
   ;; '(warning-suppress-types '((comp))))

  (setq warning-supress-log-types '((comp)))
  (setq warning-supress-types '((comp)))
#+end_src

* Misc. Keybinds

From the [[https://github.com/technomancy/better-defaults/blob/master/better-defaults.el][better defaults github page]]
(I'm pretty sure these get overwriteen by Swiper but its okay :) )
 
#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  ;; (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  ;; (global-set-key (kbd "C-M-s") 'isearch-forward)
  ;; (global-set-key (kbd "C-M-r") 'isearch-backward)
  (global-set-key (kbd "C-M-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-M-r") 'isearch-backward-regexp)
#+end_src

Enable ibuffer, this thing is amazing, wouldn't use anything else.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Keybinds to change the size of windows

#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'enlarge-window)
  (global-set-key (kbd "S-C-<up>") 'shrink-window)
#+end_src

Rebind C-S-v to the opposite of M-v, EVIL binds over C-v and I want this back.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-v") 'scroll-up-command)
#+end_src

* Custom Elisp

Fun little elisp function I wrote following a Howard Abram's tutorial, nothing special.

#+begin_src emacs-lisp
  (defun my/custom-S-o-from-vim (times)
    "Inserts a newline(s) above the line conataining the cursor.
  Very Similar to S-o from Vim"
    (interactive "p")
    (save-excursion 
      (move-beginning-of-line 1)
      (newline times)))

  (global-set-key (kbd "C-S-o")
		  'my/custom-S-o-from-vim)
#+end_src

[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#auto-tangle-configuration-files][Stolen from David]] :)

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/README.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

* Packages

** Theming and Fonts/Faces

*** Fonts/Faces

JetBrains Mono Font, my favorite, I see no reason to use anything else.

#+begin_src emacs-lisp
  ;; (setq default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 98 :width normal :foundry "JB  " :family "JetBrains Mono"))))

  (set-face-attribute 'default t :inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal :height 98 :width 'normal :foundry "JB  " :family "JetBrains Mono")
#+end_src

Not super sure what these are, I'm going to comment them out for now...

#+begin_src emacs-lisp
  (setq ansi-color-faces-vector
    [default default default italic underline success warning error])
  (setq ansi-color-names-vector
    ["black" "#d55e00" "#009e73" "#f8ec59" "#0072b2" "#cc79a7" "#56b4e9" "white"])
#+end_src

*** Themes

The doom themes are really nice, I might switch back to the `deeper-blue' theme .

#+Begin_src emacs-lisp
  (use-package spacegray-theme :defer t)
  (use-package doom-themes
    :defer t
    :init (load-theme 'doom-palenight t))
#+end_src

*** Modeline

Powerline modeline, has everything I need, I might switch to doom-modeline

#+begin_src emacs-lisp
  ;; (use-package powerline
  ;;   :config
  ;;   (powerline-default-theme))
#+end_src

Trying out doom-line, lets see how this goes!

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 30)))
#+end_src

*** Dashboard

Dashboard is a package that runs at startup that has useful imformation and quick links to files.

#+begin_src emacs-lisp
  (use-package dashboard
    :custom
    (dashboard-banner-logo-title "The Grind is not Glamorous - Casey Neistat")
    (dashboard-startup-banner "~/.emacs.d/images/floating-meditate.png")
    ;; (dashboard-startup-banner 'logo)
    :config
    (setq dashboard-items '((recents  . 5)
			  (bookmarks . 5)
			  ;; (projects . 5)
			  (agenda . 5)
			  (registers . 5)))
    (dashboard-setup-startup-hook))
#+end_src

** Interface

This is the packages that integrate with my workflow, Ivy, Evil, Magit, Org stuff, etc.

*** Evil Mode

Evil mode emulates Vi/Vim keybinds for Emacs

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+end_src

Evil-collection adds Evil binds to the rest of Emacs

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

Evil-commentary adds better commenting functionality to evil, =gcc= comments out any line.

#+begin_src emacs-lisp
  (use-package evil-commentary
    :diminish
    :config
    (evil-commentary-mode))
#+end_src

Evil-org adds evil functionality to org mode, very helpful

#+begin_src emacs-lisp
  (use-package evil-org
    ;; :diminish evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

*** Magit

Magit, the Git client for Emacs, I love it, you love it, everyone loves it.

Also installing evil-magit for evil integration with magit, evil-collection should replace it soon :tm: 

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)))

  ;; (global-set-key (kbd "C-x g") 'magit-status)

  (use-package evil-magit
    :after magit)

  (use-package magit-todos
    :defer t)

  ;; Pulled from David Wilson's config, probably won't use
  (global-set-key (kbd "C-M-;") 'magit-status)
#+end_src
  
*** Org mode

Org mode is literally the best, I'm writing this config in org, what else do you need?

The recursive agenda bit can be [[https://www.reddit.com/r/orgmode/comments/6q6cdk/adding_files_to_the_agenda_list_recursively/dkvokt1?utm_source=share&utm_medium=web2x&context=3][found here]]
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-directory "~/Nextcloud/org")
    (diary-file "~/Nextcloud/emacs-diary")
    (org-log-done t)
    (org-agenda-include-diary t)
    :bind (("C-c l" . org-stored-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture))
    :config
    (eval-after-load "org"
      '(require 'ox-md nil t))
    (eval-after-load "org"
      '(require 'org-tempo))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    ;; Have org-agenda files list recursively
    (defun refresh-org-files ()
      (interactive)
      (setq org-agenda-files (apply 'append
				    (mapcar
				     (lambda (directory)
				       (directory-files-recursively
					directory org-agenda-file-regexp))
				     '("~/Nextcloud/Org/")))))
    (refresh-org-files))
#+end_src

ox-twbs - Org mode export twitter bootstrap I think? Not sure how I got this packages installed.
#+begin_src emacs-lisp
  (use-package ox-twbs)
#+end_src
 
*** Terminal modes

**** vterm

I use vterm for the cases when I need a terminal emulator, I try to use eshell as much as possible.

#+begin_src emacs-lisp
  (use-package vterm
    :custom
    (vterm-always-compile-module t)
    :bind (("C-x v" . vterm)
	   ("C-x 4 v" . vterm-other-window)
	   :map vterm-mode-map
	   ;; came up with this myself, pretty proud of it not going to lie :)
	   ("<C-backspace>" . (lambda () (interactive) (vterm-send-meta-backspace)))))
#+end_src

**** eshell
 
Eshell is probably my favorite shell for Emacs, its fast and just works :tm:

eshell-git-prompt gives me a git prompt for eshell, kinda in the name xD

#+begin_src emacs-lisp
  (use-package eshell-git-prompt)

  (use-package eshell
    :ensure nil
    :custom (eshell-aliases-file "~/.emacs.d/eshell-alias")
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destory-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "iotop")))

    (eshell-git-prompt-use-theme 'powerline))
#+end_src

*** Completion framework(s)

I use Ivy, it's a completion framework for Emacs, I'm in the process of learning how to configure mine.

This is the initial setup of Ivy, this is bound to change drastically over time.
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :custom (ivy-initial-inputs-alist nil)
    :bind (("C-s" . counsel-grep-or-swiper)
           ("C-S-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-j" . ivy-next-line)
	   ("C-d" . ivy-switch-buffer-kill))
    :config
    (ivy-mode 1))
#+end_src

Ivy Rich provides a nicer interface to Ivy in my opinion.

#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

Counsel takes Ivy further.

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-x j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))
#+end_src

** Keybinds

*** Leader key

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-auto-unbind-keys)
    (general-override-mode +1)

    (general-create-definer my/leader-key
      :states '(normal insert visual emacs treemacs)
      :keymap 'override
      :prefix "SPC"
      :global-prefix "C-SPC"
      :non-normal-prefix "C-SPC"))
#+end_src

*** Hydra's

*** Leader functions
    
#+begin_src emacs-lisp
  (my/leader-key 
	"SPC"   '(counsel-find-file :wk "counsel find file")
	"TAB" '(evil-switch-to-windows-last-buffer :wk "switch to previous buffer"))
#+end_src

** General tools

These are some general tools that I use, they don't really belong in any category.

Rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :config
    ;; (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

Rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

Helpful - better help buffer
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

Rg - Ripgrep inside of Emacs
#+begin_src emacs-lisp
  (use-package rg)
#+end_src

Hl-todo - highlight TODO keywords and the like
#+begin_src emacs-lisp
    (use-package hl-todo
      :config
      (hl-todo-mode))
#+end_src

** Programming

*** Nix

Nix is a fully function programming language centered around the NixOS ecosystem, I'm learning it currently and plan to switch soon :tm:

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

*** Haskell

Haskell is a general purpose, statically typed, purely function programming language with type inference and lazy evaluation.

I have a bit of a thing for functional programming, learning Haskell is on my list of TODO's

#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

*** Yaml

Its yaml, what more is their to say? Better than json but still *sucks*

PS: adding this package also helps not break =docker-compose-mode= for some reason 

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'" . yaml-mode)
	  ("\\.yaml\\'" . yaml-mode))
#+end_src

*** Docker

I use Docker everyday for work, home, testing out programs, etc. So consequently I edit a LOT of yaml files.

This gives better syntax highlighting, code completion, etc in docker-compose.yml files
#+begin_src emacs-lisp
  (use-package docker-compose-mode)
#+end_src

Same as above except for in Dockerfiles
#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src

** Fun packages

These packages are kinda fun, don't really have much of a point

Elcord - Discord rich presence 
#+begin_src emacs-lisp
  (use-package elcord
    ;; :config
    ;; (when (string= (system-name) "archpc")
    ;;   (elcord-mode))
    )
#+end_src

Chess - play chess inside of Emacs!
#+Begin_src emacs-lisp
  (use-package chess)
#+end_src

* TODO Sort out eventually

Figure out what to do with =(custom-enabled-themes '(deeper-blue))=, I'll probably put all my themes in a Hydra.

Have these too, need to sort out eventually...
#+begin_src emacs-lisp
  (setq-default c-basic-offset 8)
  (setq c-default-style '((java-mode . "java")
			  (awk-mode . "awk")
			  (other . "linux")))
#+end_src
