#+TITLE: Ethan Edward's Emacs Configuration
#+AUTHOR: Ethan Carter Edwards
#+OPTIONS: toc:t
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+LATEX_HEADER: \usepackage[a4paper, left=1.5cm, right=1.5cm, top=2cm, bottom=2cm]{geometry}

This setup was highly inspired by [[https://jamiecollinson.com/blog/my-emacs-config/#footnote-1][Jamie Collinson's config]]

This is my Emacs Configuration, I've been using Emacs for a few months and I decided to go big or go home.

After a while of having it all in a single elisp file it got annoying/hard to work with.

I'm documenting it for fun, and I like notes so I'm linking to where I found each trick or configuration.

I'll also probably put this somewhere on [[https://ethancedwards.com][my site]] and update it from time to time, but the "live" version is on my [[https://gitlab.com/ethancedwards/emacs-config][gitlab]].

#+BEGIN_QUOTE
"The Grind is not Glamorous."
- Casey Neistat
#+END_QUOTE

* Setup

** Configure package sources and =use-package= + Garbage Collection

Add repo's. ELPA, MELPA, org, and ublt.

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from README.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; initialize package sources
  ;; (require 'package)
  ;; (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
  ;; 			 ("melpa" . "https://melpa.org/packages/")
  ;; 			 ("ublt" . "https://elpa.ubolonton.org/packages/")
  ;; 			 ("org" . "https://orgmode.org/elpa/")))

  ;; (package-initialize)
  ;; (unless (package-installed-p 'use-package)
  ;;   (package-refresh-contents)
  ;;   (package-install 'use-package))

  ;; (require 'use-package)
  ;; ;; (setq use-package-compute-statistics t)
  ;; (setq use-package-always-ensure t)
#+end_src

** Configure straight.el

#+begin_src emacs-lisp
  ;; install straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; https://www.reddit.com/r/emacs/comments/mtb05k/emacs_init_time_decreased_65_after_i_realized_the/
  (setq straight-check-for-modifications '(check-on-save find-when-checking))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

** Benchmark startup

Benchmark's my startup, when running as daemon I won't see this message so I can view it in =*Messages*=

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

** Find config function

#+begin_src emacs-lisp
  (defun find-config ()
    "Edit README.org/init.el"
    (interactive)
    (find-file "~/.emacs.d/README.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+end_src

** Find Main org file function

#+begin_src emacs-lisp
  (defun find-main ()
    "Find index org file"
    (interactive)
    (org-roam-jump-to-index))

  ;; (global-set-key (kbd "C-c O") '(lambda () "Find index org file" (interactive) (org-roam-jump-to-index)))
  (global-set-key (kbd "C-c O") 'find-main)
#+end_src

** Set custom settings to load in own file

Stops Emacs from adding weird things to =init.el= This creates a temporary file that'll be destroyed.

#+begin_src emacs-lisp
  ;; (setq custom-file (make-temp-file "emacs-custom"))
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  ;; (setq custom-file (make-temp-file "emacs-custom.el"))
#+end_src

** Add elisp directory to load-path

I have my custom/stolen elisp code in ~/.emacs.d/lisp/. This will add that to my load path

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src

* Preferences

** Turn off ugly window deocration.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode -1)
#+end_src

** Shorten the =yes or no= prompts

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Move all of the extra save files to ~/.saves

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
#+end_src

** Display line numbers, might change only to prog, text, and conf mode later

#+begin_src emacs-lisp
  ;; (when (version<= "26.0.50" emacs-version )
  ;;   (global-display-line-numbers-mode))

  ;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+end_src

** Confirm to kill Emacs whenever not running in Daemon mode

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Just some user information

#+begin_src emacs-lisp
  (setq user-full-name "Ethan Carter Edwards"
	user-mail-address "ethan@ethancedwards.com")
#+end_src

** Set Dashboard as my initial buffer

#+begin_src emacs-lisp
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

** Disable nativecomp logs, they're very annoying.

#+begin_src emacs-lisp
  ;; '(warning-suppress-log-types '((comp) (comp)))
  ;; '(warning-suppress-types '((comp))))
  (setq warning-suppress-log-types '((comp)))
  (setq warning-suppress-types '((comp)))
#+end_src

** Parenthesis tweaks

=show-paren-mode= highlights the matching parenthesis
=electric-pair-mode= pairs any quotes, parens, brackets, etc.

#+begin_src emacs-lisp
  (show-paren-mode)
  (electric-pair-mode)
#+end_src

** Delete trailing whitespace on save

#+begin_src emacs-lisp
  (add-hook 'before-save-hook '(lambda () (delete-trailing-whitespace)))
#+end_src

* Misc. Keybinds

From the [[https://github.com/technomancy/better-defaults/blob/master/better-defaults.el][better defaults github page]]
(I'm pretty sure these get overwriteen by Swiper but its okay :) )

#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-M-r") 'isearch-backward-regexp)
#+end_src

Enable ibuffer, this thing is amazing, wouldn't use anything else.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

Keybinds to change the size of windows

#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'enlarge-window)
  (global-set-key (kbd "S-C-<up>") 'shrink-window)
#+end_src

Rebind C-S-v to the opposite of M-v, EVIL binds over C-v and I want this back.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-v") 'scroll-up-command)
#+end_src

* Custom Elisp

** Howard Abram's tutorial lisp

Fun little elisp function I wrote following a Howard Abram's tutorial, nothing special.

#+begin_src emacs-lisp
  (defun my/custom-S-o-from-vim (times)
    "Inserts a newline(s) above the line conataining the cursor.
  Very Similar to S-o from Vim"
    (interactive "p")
    (save-excursion
      (move-beginning-of-line 1)
      (newline times)))

  (global-set-key (kbd "C-S-o")
		  'my/custom-S-o-from-vim)
#+end_src

** =M-x stop=

Funny little function from user =jeetelongname#5927= on Discord :)

#+begin_src emacs-lisp
  (defun stop ()
  "Proves I'm sane, not losing my sanity whatsoever"
    (interactive)
    (defvar name "*I can quit at any time*")
    (generate-new-buffer name)
    (switch-to-buffer name)
    (insert "I can stop at any time\n")
    (insert "I am in control"))
#+end_src

** Auto bablel README.org after saving

[[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#auto-tangle-configuration-files][Stolen from David]] :)

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/README.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

** Refresh org files

If I move a file agenda freaks out, so I can just run this and fix it.

The recursive agenda bit can be [[https://www.reddit.com/r/orgmode/comments/6q6cdk/adding_files_to_the_agenda_list_recursively/dkvokt1?utm_source=share&utm_medium=web2x&context=3][found here]]
#+begin_src emacs-lisp
  ;; Have org-agenda files list recursively
  (defun my/refresh-org-files ()
	(interactive)
	(setq org-agenda-files (apply 'append
				      (mapcar
				       (lambda (directory)
					 (directory-files-recursively
					  directory org-agenda-file-regexp))
				       '("~/Nextcloud/Org/")))))
#+end_src

* Packages

** Keybinds

*** Leader key

I use general.el to set my "leader" key, =SPC=, or =C-SPC=.

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-auto-unbind-keys)
    (general-override-mode +1)

    (general-create-definer my/leader-key
      :states '(normal insert visual emacs treemacs)
      :keymap 'override
      :prefix "SPC"
      :global-prefix "C-SPC"
      :non-normal-prefix "C-SPC"))
#+end_src

*** Hydra's

Hydra's are a way you can make Emacs binds "stick around"

#+begin_src emacs-lisp
  (use-package hydra)
#+end_src

*** Leader functions

Here I can define functions with my leader key.

#+begin_src emacs-lisp
  (my/leader-key
	"SPC"  '(counsel-find-file :wk "counsel find file")
	"I" '(find-config :wk "edit README.org/init.el")
	"O" '(find-main :wk "edit index/main org file")
	"." '(counsel-M-x :wk "M-x"))
#+end_src

*** Which-key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 5))
#+end_src

** Theming and Fonts/Faces

*** Fonts/Faces

JetBrains Mono Font, my favorite, I see no reason to use anything else.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal :height 98 :width 'normal :foundry "JB  " :family "JetBrains Mono")

  (when (string= system-type "darwin")
    (set-face-attribute 'default nil :inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant 'normal :weight 'normal :height 130 :width 'normal :foundry "JB  " :family "JetBrains Mono"))
#+end_src

Not super sure what these are, I'm going to comment them out for now...

#+begin_src emacs-lisp
  (setq ansi-color-faces-vector
    [default default default italic underline success warning error])
  (setq ansi-color-names-vector
    ["black" "#d55e00" "#009e73" "#f8ec59" "#0072b2" "#cc79a7" "#56b4e9" "white"])
#+end_src

*** Themes

The doom themes are really nice, I might switch back to the `deeper-blue' theme .

#+Begin_src emacs-lisp
  (use-package spacegray-theme :defer t)
  (use-package doom-themes
    :defer t
    :init (load-theme 'doom-palenight t))
#+end_src

*** Modeline

Powerline modeline, has everything I need, I might switch to doom-modeline

#+begin_src emacs-lisp
  ;; (use-package powerline
  ;;   :config
  ;;   (powerline-default-theme))
#+end_src

Trying out doom-line, lets see how this goes!

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 30))
    :config
    (display-time-mode)
    (setq display-time-load-average nil)
    ;; https://emacs.stackexchange.com/questions/20783/remove-load-average-from-time-string-displayed-in-mode-line
    (setq display-time-default-load-average nil)
    (display-battery-mode))
#+end_src

*** Dashboard

Dashboard is a package that runs at startup that has useful imformation and quick links to files.

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    ;;(setq dashboard-banner-logo-title "The Grind is not Glamorous - Casey Neistat")
    ;;(setq dashboard-banner-logo-title "Ad Victoriam - Paladin Danse")
    (setq dashboard-banner-logo-title "I'm just a simple man, trying to make my way in the universe. - Jango Fett")
    (setq dashboard-startup-banner "~/.emacs.d/images/floating-meditate.png")
    (setq dashboard-items '((recents  . 5)
			  (bookmarks . 5)
			  ;; (projects . 5)
			  (agenda . 5)
			  (registers . 5)))
    (dashboard-setup-startup-hook))
#+end_src

** Interface

This is the packages that integrate with my workflow, Ivy, Evil, Magit, Org stuff, etc.

*** ESC Cancels all

Don't know if I'll use it, maybe it'll work for =C-[=, if it doesn't then I don't feel like fixing this.

#+begin_src emacs-lisp
      (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

*** Rebind C-u

Rebind =C-u= to evil stuffz, so I need to rebind =universal-argument= command to another key, =C-S-u=

#+begin_src emacs-lisp
  (global-set-key (kbd "C-S-u") 'universal-argument)
#+end_src

*** Evil Mode

Evil mode emulates Vi/Vim keybinds for Emacs

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-respect-visual-line-mode t)
    ;; :bind (:map evil-motion-state-map
    ;;       ("/" . counsel-grep-or-swiper))
    :config
    (evil-mode 1))

  (defhydra my/window-hydra ()
    ("h" evil-window-left)
    ("j" evil-window-down)
    ("k" evil-window-up)
    ("l" evil-window-right)
    ("c" evil-window-delete)
    ("v" evil-window-vsplit)
    ("s" evil-window-split)
    ("o" delete-other-windows)
    ("q" nil "quit"))

  (my/leader-key
	"w"   '(:ignore t :wk "window")
	"w h" '(evil-window-left :wk "move to left window")
	"w j" '(evil-window-down :wk "move to down window")
	"w k" '(evil-window-up :wk "move to up window")
	"w l" '(evil-window-right :wk "move to right window")
	"w c" '(evil-window-delete :wk "close window")
	"w v" '(evil-window-vsplit :wk "split window vertically")
	"w s" '(evil-window-split :wk "split window horizontally")
	"w o" '(delete-other-windows :wk "delete other windows")
	"TAB" '(evil-switch-to-windows-last-buffer :wk "switch to previous buffer")
	"w w" '(my/window-hydra/body :wk "window hydra"))
#+end_src

Evil-collection adds Evil binds to the rest of Emacs

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

Evil-commentary adds better commenting functionality to evil, =gcc= comments out any line.

#+begin_src emacs-lisp
  (use-package evil-commentary
    :diminish
    :after evil
    :config
    (evil-commentary-mode))
#+end_src

Evil-org adds evil functionality to org mode, very helpful

#+begin_src emacs-lisp
  (use-package evil-org
    ;; :diminish evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

*** Magit

Magit, the Git client for Emacs, I love it, you love it, everyone loves it.

Also installing evil-magit for evil integration with magit, evil-collection should replace it soon :tm:

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
	   ;; Pulled from David Wilson's config, probably won't use
	   ("C-M-;" . magit-status)))

  (my/leader-key
      "g" '(:ignore t :wk "magit")
      "g g" '(magit-status :wk "magit-status")
      "g b" '(magit-blame :wk "magit-blame")
      "g e" '(magit-dired-jump :wk "dired in dir"))

  (use-package magit-todos
    :defer t)
#+end_src

*** Dired

Dired is a file manager built into Emacs, its pretty great.

#+begin_src emacs-lisp
  (use-package dired
    ;; :ensure nil
    :straight nil
    ;; :bind (:map dired-mode-map
    ;; 	      ("SPC" . nil))
    :config
    (when (string= system-type "darwin")
      (setq dired-use-ls-dired nil)))

    (my/leader-key
      "e" '(dired-jump :wk "dired")
      "E" '(dired :wk "dired"))
#+end_src

**** dired-subtree

This allows me to have subtree views in dired

#+begin_src emacs-lisp
  (use-package dired-subtree
	  :bind (:map dired-mode-map
		      ("<tab>" . dired-subtree-toggle)
		      ("<backtab>" . dired-subtree-cycle)))
#+end_src

*** Projectile

#+begin_src emacs-lisp
  ;; (use-package projectile
  ;;   :bind (:map projectile-mode-map
  ;; 	      (("C-c p" . projectile-command-map)))
  ;;   :custom ((projectile-completion-system 'ivy))
  ;;   :init
  ;;   (when (file-directory-p "~/git")
  ;;     (setq projectile-project-search-path '("~/git")))
  ;;   (setq projectile-switch-project-action #'projectile-dired)
  ;;   :config
  ;;   ;; I don't really want this running all the time, so I `toggle' it from time to time
  ;;   (defalias 'toggle-projectile 'projectile-mode))

  ;; (use-package counsel-projectile
  ;;   :config (counsel-projectile-mode))
#+end_src

*** Treemacs

Treemacs is similar to nerdtree in Vim, I don't use it much but am interested in treemacs-lsp

#+begin_src emacs-lisp
  (use-package treemacs)
#+end_src

This is for evil support in treemacs

#+begin_src emacs-lisp
  (use-package treemacs-evil
    :after (treemacs evil))
#+end_src

*** Org mode

Org mode is literally the best, I'm writing this config in org, what else do you need?

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-directory "~/Nextcloud/org")
    (diary-file "~/Nextcloud/Org/emacs-diary")
    (org-default-notes-file "~/Nextcloud/Org/Notes.org")
    (org-log-done t)
    (org-agenda-include-diary t)
    :bind (("C-c L" . org-stored-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture))
    :config
    (eval-after-load "org"
      '(require 'ox-md nil t))
    (eval-after-load "org"
      '(require 'org-tempo))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

    (my/refresh-org-files))

    (my/leader-key
	"n r" '(my/refresh-org-files :wk "refresh my org files")
	"n a" '(org-agenda :wk "org agenda"))
#+end_src

**** Org roam

#+begin_src emacs-lisp
  (use-package org-roam
	:hook
	(after-init . org-roam-mode)
	:custom
	(org-roam-directory "~/Nextcloud/Org")
	(org-roam-tag-sources '(last-directory prop))
	(org-roam-rename-file-on-title-change nil)
	:bind (:map org-roam-mode-map
		(("C-c n l" . org-roam)
		 ("C-c n f" . org-roam-find-file)
		 ("C-c n g" . org-roam-graph))
		:map org-mode-map
		(("C-c n i" . org-roam-insert))
		(("C-c n I" . org-roam-insert-immediate))))

  (my/leader-key
    "n l" '(org-roam :wk "org roam")
    "n f" '(org-roam-find-file :wk "find roam file")
    "n g" '(org-roam-graph :wk "roam graph")
    "n i" '(org-roam-insert :wk "roam insert")
    "n I" '(org-roam-insert-immediate :wk "roam insert immediate")
    "n t" '(org-roam-tag-add :wk "roam insert tag"))
#+end_src

**** Org roam server

A Web Application to Visualize the Org-Roam Database

#+begin_src emacs-lisp
  (use-package org-roam-server
    :config
    (setq org-roam-server-host "127.0.0.1"
	  org-roam-server-port 8080
	  org-roam-server-authenticate nil
	  org-roam-server-export-inline-images t
	  org-roam-server-serve-files nil
	  org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
	  org-roam-server-network-poll t
	  org-roam-server-network-arrows nil
	  org-roam-server-network-label-truncate t
	  org-roam-server-network-label-truncate-length 60
	  org-roam-server-network-label-wrap-length 20))
#+end_src

  ox-twbs - Org mode export twitter bootstrap I think? Not sure how I got this package installed.
#+begin_src emacs-lisp
    ;; (use-package ox-twbs
    ;;   :defer t)
#+end_src

**** org-outline-tree

An org roam similar buffer for org mode outlines

#+begin_src emacs-lisp
  (use-package org-ol-tree
    :straight (org-ol-tree :type git :host github :repo "Townk/org-ol-tree")
    :commands (org-ol-tree/display-sections)
    ;; :init
    )
#+end_src

*** Terminal modes

**** vterm

I use vterm for the cases when I need a terminal emulator, I try to use eshell as much as possible.

#+begin_src emacs-lisp
  (use-package vterm
    :custom
    (vterm-always-compile-module t)
    :bind (("C-x v" . vterm)
	   ("C-x 4 v" . vterm-other-window)
	   :map vterm-mode-map
	   ("<C-backspace>" . (lambda () (interactive) (vterm-send-meta-backspace)))))
	   ;; came up with this myself, fixes C-backspace, pretty proud of it not going to lie :)
  (my/leader-key
	"v v" '(vterm :wk "vterm"))
#+end_src

**** eshell

Eshell is probably my favorite shell for Emacs, its fast and just works :tm:

eshell-git-prompt gives me a git prompt for eshell, kinda in the name xD

#+begin_src emacs-lisp
  (use-package eshell-git-prompt)

  (use-package eshell
    ;; :ensure nil
    :straight nil
    :custom (eshell-aliases-file "~/.emacs.d/eshell/eshell-alias")
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destory-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "iotop")))

    (eshell-git-prompt-use-theme 'powerline))

    (my/leader-key
	"v e" '(eshell :wk "eshell"))
#+end_src

*** Completion framework(s)

**** Counsel

Counsel takes Ivy further.

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("C-x j" . 'counsel-switch-buffer)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    :config
    (counsel-mode 1))
#+end_src

**** Ivy

I use Ivy, it's a completion framework for Emacs, I'm in the process of learning how to configure mine.
This is the initial setup of Ivy, this is bound to change drastically over time.

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :custom (ivy-initial-inputs-alist nil)
    :bind (("C-s" . counsel-grep-or-swiper)
           ("C-S-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-j" . ivy-next-line)
	   ("C-d" . ivy-switch-buffer-kill))
    :config
    (ivy-mode 1))
#+end_src

**** Ivy Rich

Ivy Rich provides a nicer interface to Ivy in my opinion.

#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

** EXWM

EXWM is an X window manager for Emacs. Currently I use bspwm but I'm open to trying EXWM out.

#+begin_src emacs-lisp
  ;; (use-package exwm)
#+end_src

** General tools

These are some general tools that I use, they don't really belong in any category.

*** Rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :config
    ;; (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

*** Rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Helpful - better help buffer
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (my/leader-key
      "h" '(:ignore t :wk "helpful")
      "h f" '(counsel-describe-function :wk "describe function")
      "h v" '(counsel-describe-variable :wk "describe variable")
      "h k" '(helpful-key :wk "describe keybind"))
#+end_src

*** Rg - Ripgrep inside of Emacs
#+begin_src emacs-lisp
  (use-package rg
    :defer t)
#+end_src

*** Hl-todo - highlight TODO keywords and the like
#+begin_src emacs-lisp
  (use-package hl-todo
    :config
    (global-hl-todo-mode))
#+end_src

*** exec-path-from-shell - enable $PATH on MacOSX

#+begin_src emacs-lisp
  ;; only install when on macos
  (when (string= system-type "darwin")
    (use-package exec-path-from-shell
      :config
      (when (memq window-system '(mac ns))
	(exec-path-from-shell-initialize))
      (when (daemonp)
	(exec-path-from-shell-initialize))
      ))
#+end_src

# *** spdx - insert spdx headers

# #+begin_src emacs-lisp
#   (use-package spdx
#     :bind (:map prog-mode-map
# 	   ("C-c i l" . spdx-insert-spdx))
#     :custom
#     (spdx-copyright-holder 'auto)
#     (spdx-project-detection 'auto))
# #+end_src

*** direnv - emacs direnv integration

#+begin_src emacs-lisp
  ;; (use-package direnv
  ;;  :config
  ;;  (direnv-mode))
#+end_src

*** debbugs - access the gnu bug tracker form inside emacs

#+begin_src emacs-lisp
  (use-package debbugs)
#+end_src

** Programming

*** lsp-mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :defer t
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+end_src

*** lsp-treemacs

lsp-treemacs allows for IDE like function navigation and documentation viewing

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** lsp-ui

#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

*** company-mode

#+begin_src emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  (use-package company
    :after lsp-mode
    ;; :hook (after-init-hook . global-company-mode)
    :config
    (company-tng-mode 0)
    :custom (company-minimum-prefix-length 2)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
	  (:map lsp-mode-map
		("<tab>" . company-indent-or-complete-common)))
#+end_src

*** flycheck

Syntax checking for GNU Emacs

#+begin_src emacs-lisp
  (use-package flycheck
    :hook (lsp-deferred . flycheck-mode))
#+end_src

*** yasnippet

Enable =yasnippet=

#+begin_src emacs-lisp
  (use-package yasnippet
     :config
     (yas-global-mode))
#+end_src

Add some snippets :)

#+begin_src emacs-lisp
  (use-package yasnippet-snippets)
#+end_src

*** Rust

I'll be using [[https://github.com/brotzeit/rustic][rustic]] for Rust development inside of Emacs

#+begin_src emacs-lisp
  (use-package rustic
    :mode ("\\.rs\\'" . rustic-mode)
    :hook (rustic-mode . lsp-deferred))
#+end_src

*** Python

It's python, meh, no one cares, but everyone uses it.

#+begin_src emacs-lisp
  ;; (use-package python-mode
  ;;   ;; :ensure t
  ;;   :straight t
  ;;   :defer t
  ;;   :hook (python-mode . lsp-deferred)
  ;;   :custom
  ;;   (python-shell-interpreter "python3"))

  (setq python-shell-interpreter "python3")
#+end_src

*** Solidity

Solidity Programming language, used for crypto stuffz

#+begin_src emacs-lisp
  (use-package solidity-mode
    :mode ("\\.sol\\'" . solidity-mode)
    :config
    (setq solidity-comment-style 'slash)
    )
#+end_src

*** Web dev

**** web-mode - HTML + CSS

#+begin_src emacs-lisp
  (use-package web-mode
    :mode ("\\.html\\'" . web-mode)
    :mode ("\\.xhtml\\'" . web-mode)
    :mode ("\\.css\\'" . css-mode)
    :mode ("\\.scss\\'" . scss-mode))
#+end_src

**** Javascript

#+begin_src emacs-lisp
  (use-package rjsx-mode
    :config
    :mode ("\\.js\\'" . rjsx-mode)
    :mode ("\\.jsx\\'" . rjsx-mode)
    :hook (rjsx-mode . lsp-deferred))
#+end_src

**** Typescript

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

*** Nix

Nix is a fully function programming language centered around the NixOS ecosystem, I'm learning it currently and plan to switch soon :tm:

#+begin_src emacs-lisp
  (use-package nix-mode
    :config
    (require 'lsp)
    (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
		      :major-modes '(nix-mode)
		      :server-id 'nix))
    :hook (nix-mode . lsp-deferred))
#+end_src

*** Guix

#+begin_src emacs-lisp
  (use-package guix)
#+end_src

*** Geiser

#+begin_src emacs-lisp
  (use-package geiser
    :config
    (setq geiser-default-implementation 'guile)
    (setq geiser-active-implementations '(gambit guile)))
#+end_src

*** Haskell

Haskell is a general purpose, statically typed, purely function programming language with type inference and lazy evaluation.

I have a bit of a thing for functional programming, learning Haskell is on my list of TODO's

#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

*** GDScript

GDScript, a high-level, dynamically typed programming language. Its used for programming in the Godot Game engine language.

#+begin_src emacs-lisp
  (use-package gdscript-mode)
#+end_src

*** vimscript

#+begin_src emacs-lisp
  (use-package vimrc-mode
    :mode ("\\.vim\\(rc\\)?\\'" . vimrc-mode))
#+end_src

*** Yaml

Its yaml, what more is there to say? Better than json but still *sucks*

PS: adding this package also helps not break =docker-compose-mode= for some reason

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'" . yaml-mode)
	  ("\\.yaml\\'" . yaml-mode)
     :hook (yaml-mode . lsp-deferred))
#+end_src

*** json

yaml but worse

#+begin_src emacs-lisp
  (use-package json-mode
    :mode ("\\.json\\'" . json-mode)
    :hook (json-mode . lsp-deferred))
#+end_src

*** Docker

I use Docker everyday for work, home, testing out programs, etc. So consequently I edit a LOT of yaml files.

This gives better syntax highlighting, code completion, etc in docker-compose.yml files
#+begin_src emacs-lisp
  ;; (use-package docker-compose-mode
  ;;   :mode ("docker-compose.yml\\'" . docker-compose-mode)
  ;; 	("docker-compose.yaml\\'" . docker-compose-mode)
  ;; 	("stack.yml\\'" . docker-compose-mode))
#+end_src

Same as above except for in Dockerfiles
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :hook (dockerfile-mode . lsp-deferred))
#+end_src

#+end_src

** Fun packages

These packages are kinda fun, don't really have much of a point

*** Elcord - Discord rich presence
#+begin_src emacs-lisp
  (use-package elcord
    :defer t
    ;; :config
    ;; (when (string= (system-name) "archpc")
    ;;   (elcord-mode))
    )
#+end_src

*** Spotify - Control the Spotify app in emacs

#+begin_src emacs-lisp
  (use-package spotify
    :defer t)

  (my/leader-key
      "a" '(:ignore t :wk "applications")
      "a s SPC" '(spotify-playpause :wk "play-pause")
      "a s n" '(spotify-next :wk "spotify next")
      "a s p" '(spotify-previous :wk "spotify previous")
      "a s c" '(spotify-current :wk "spotify current song"))
#+end_src

*** Chess - play chess inside of Emacs!
#+Begin_src emacs-lisp
  (use-package chess
    :defer t)
#+end_src

*** gnugo - Play GO inside of Emacs!
#+begin_src emacs-lisp
  (use-package gnugo
    :defer t)
#+end_src

*** 2048-game - play 2048 inside of emacs!

#+begin_src emacs-lisp
  (use-package 2048-game
    :defer t)
#+end_src

*** snow.el - Let it snow in Emacs!

#+begin_src emacs-lisp
  (use-package snow
    :defer t)
#+end_src

* Applications

** mu4e

mu4e is an email client for Emacs. Currently I use neomutt and I'm very happy with it, but I'm willing to experiment.

#+begin_src emacs-lisp
  ;; (use-package mu4e
  ;;   :ensure nil
  ;;   ;; :if (and (eq system-type 'gnu/linux) (string-equal system-name "archpc"))
  ;;   :config
  ;;   ;; add mu4e to the load path on Arch
  ;;   (require 'mu4e))

  ;; (when (string= (system-name) "archpc")
  ;;   (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
  ;;   (require 'mu4e))
#+end_src

** emms

EMMS is a Music player/interface for Emacs. I've heard good things about it and I'm willing to try it out.

#+begin_src emacs-lisp
  (use-package emms
    :commands emms
    :config
    (emms-standard)
    (emms-default-players))
#+end_src

** elpher

elpher is a gemini and gopher client for emacs.

#+begin_src emacs-lisp
  (use-package elpher)
#+end_src
